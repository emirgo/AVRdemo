
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000168  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bd  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000117  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 56 00 	call	0xac	; 0xac <main>
  8e:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delay_ms>:
int delay = 100;

// Custom delay function for ease of use
void delay_ms(int n)
{
	while(n--)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	41 f0       	breq	.+16     	; 0xaa <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e9       	ldi	r30, 0x9F	; 159
  9c:	ff e0       	ldi	r31, 0x0F	; 15
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <delay_ms+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <delay_ms+0xe>
  a4:	00 00       	nop
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	c1 f7       	brne	.-16     	; 0x9a <delay_ms+0x4>
  aa:	08 95       	ret

000000ac <main>:
	}
}

int main(void)
{
	DDRB = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 b9       	out	0x04, r24	; 4
	
	EICRA = 0b00001110;
  b0:	8e e0       	ldi	r24, 0x0E	; 14
  b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << INT1) | (1 << INT0);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	8d bb       	out	0x1d, r24	; 29
	sei();
  ba:	78 94       	sei
	
	// Main loop
	while(1)
	{
		for(PORTB = 0x01; PORTB != 0x10; PORTB <<= 1)
  bc:	d1 e0       	ldi	r29, 0x01	; 1
		{
			delay_ms(delay);
		}
		
		for(PORTB = 0x10; PORTB != 0x01; PORTB >>= 1)
  be:	c0 e1       	ldi	r28, 0x10	; 16
	sei();
	
	// Main loop
	while(1)
	{
		for(PORTB = 0x01; PORTB != 0x10; PORTB <<= 1)
  c0:	d5 b9       	out	0x05, r29	; 5
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	61 f0       	breq	.+24     	; 0xe0 <main+0x34>
		{
			delay_ms(delay);
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <delay_ms>
	sei();
	
	// Main loop
	while(1)
	{
		for(PORTB = 0x01; PORTB != 0x10; PORTB <<= 1)
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	88 0f       	add	r24, r24
  d8:	85 b9       	out	0x05, r24	; 5
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	80 31       	cpi	r24, 0x10	; 16
  de:	a1 f7       	brne	.-24     	; 0xc8 <main+0x1c>
		{
			delay_ms(delay);
		}
		
		for(PORTB = 0x10; PORTB != 0x01; PORTB >>= 1)
  e0:	c5 b9       	out	0x05, r28	; 5
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	61 f3       	breq	.-40     	; 0xc0 <main+0x14>
		{
			delay_ms(delay);
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	0e 94 4b 00 	call	0x96	; 0x96 <delay_ms>
		for(PORTB = 0x01; PORTB != 0x10; PORTB <<= 1)
		{
			delay_ms(delay);
		}
		
		for(PORTB = 0x10; PORTB != 0x01; PORTB >>= 1)
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	86 95       	lsr	r24
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	a1 f7       	brne	.-24     	; 0xe8 <main+0x3c>
 100:	df cf       	rjmp	.-66     	; 0xc0 <main+0x14>

00000102 <__vector_1>:
	return 0;
}

// Slow down button
ISR(INT0_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	delay += 10;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 118:	0a 96       	adiw	r24, 0x0a	; 10
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_2>:

// Speed up button
ISR(INT1_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	if(delay > 10)
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 146:	8b 30       	cpi	r24, 0x0B	; 11
 148:	91 05       	cpc	r25, r1
 14a:	2c f0       	brlt	.+10     	; 0x156 <__vector_2+0x26>
		delay -= 10;
 14c:	0a 97       	sbiw	r24, 0x0a	; 10
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
