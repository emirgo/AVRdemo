
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dc  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000266  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile int extraTimer = 0;
volatile int extraTimer8bit = 0;

int main(void)
{
	DDRB = 0xFF; // Set output pin
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	
	// 16-bit timer
	TCCR1B = (1 << CS11) | (1 << CS10); // Set prescaler to 64
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); // Set CTC
  9c:	80 81       	ld	r24, Z
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	80 83       	st	Z, r24
	
	OCR1A = 2500; // Comparison TOP value
  a2:	84 ec       	ldi	r24, 0xC4	; 196
  a4:	99 e0       	ldi	r25, 0x09	; 9
  a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1 << OCIE1A); // Set OCRA1A to interrupt
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// 8-bit timer
	TCCR0B |= (1 << WGM01);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS01);
  ba:	85 b5       	in	r24, 0x25	; 37
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	85 bd       	out	0x25, r24	; 37
	OCR0A = 200;
  c0:	88 ec       	ldi	r24, 0xC8	; 200
  c2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE1A);
  c4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	sei(); // Enable global interrupts
  c8:	78 94       	sei
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x3a>

000000cc <__vector_11>:
		
    }
}

ISR(TIMER1_COMPA_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	extraTimer++;
  da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <extraTimer>
  de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <extraTimer+0x1>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <extraTimer+0x1>
  e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <extraTimer>
	if(extraTimer >= 25) // 25 x 0.01s = 0.25s
  ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <extraTimer>
  f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <extraTimer+0x1>
  f4:	49 97       	sbiw	r24, 0x19	; 25
  f6:	44 f0       	brlt	.+16     	; 0x108 <__vector_11+0x3c>
	{
		PORTB ^= (1 << PORTB0);
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	89 27       	eor	r24, r25
  fe:	85 b9       	out	0x05, r24	; 5
		extraTimer = 0; // Reset timer
 100:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <extraTimer+0x1>
 104:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <extraTimer>
	}
}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	extraTimer8bit++;
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(extraTimer8bit >= 2500)
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 140:	84 3c       	cpi	r24, 0xC4	; 196
 142:	99 40       	sbci	r25, 0x09	; 9
 144:	44 f0       	brlt	.+16     	; 0x156 <__vector_14+0x40>
	{
		PORTB ^= (1 << PORTB1);
 146:	95 b1       	in	r25, 0x05	; 5
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	89 27       	eor	r24, r25
 14c:	85 b9       	out	0x05, r24	; 5
		extraTimer8bit = 0; // Reset timer
 14e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 152:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
