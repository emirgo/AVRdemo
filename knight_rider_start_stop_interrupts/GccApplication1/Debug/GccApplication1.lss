
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a1  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  000009fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c8  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ab  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile int state = 0;

int main(void)
{
	DDRB = 0x1F;
  90:	8f e1       	ldi	r24, 0x1F	; 31
  92:	84 b9       	out	0x04, r24	; 4
	
	PORTD = (1 << PORTD3);
  94:	88 e0       	ldi	r24, 0x08	; 8
  96:	8b b9       	out	0x0b, r24	; 11
	EIMSK = (1 << INT1);
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	8d bb       	out	0x1d, r24	; 29
	sei();
  9c:	78 94       	sei
	// Main loop
	while(1)
	{
		if(state)
		{
			for(PORTB = 0x01; PORTB != 0x10; PORTB <<= 1)
  9e:	31 e0       	ldi	r19, 0x01	; 1
			{
				_delay_ms(50);
			}
			
			for(PORTB = 0x10; PORTB != 0x01; PORTB >>= 1)
  a0:	20 e1       	ldi	r18, 0x10	; 16
	sei();
	
	// Main loop
	while(1)
	{
		if(state)
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  aa:	89 2b       	or	r24, r25
  ac:	39 f1       	breq	.+78     	; 0xfc <main+0x6c>
		{
			for(PORTB = 0x01; PORTB != 0x10; PORTB <<= 1)
  ae:	35 b9       	out	0x05, r19	; 5
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	80 31       	cpi	r24, 0x10	; 16
  b4:	79 f0       	breq	.+30     	; 0xd4 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	80 e7       	ldi	r24, 0x70	; 112
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	41 50       	subi	r20, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x36>
  c6:	00 00       	nop
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	88 0f       	add	r24, r24
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	80 31       	cpi	r24, 0x10	; 16
  d2:	89 f7       	brne	.-30     	; 0xb6 <main+0x26>
			{
				_delay_ms(50);
			}
			
			for(PORTB = 0x10; PORTB != 0x01; PORTB >>= 1)
  d4:	25 b9       	out	0x05, r18	; 5
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	19 f3       	breq	.-58     	; 0xa2 <main+0x12>
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x52>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x5c>
  ec:	00 00       	nop
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	86 95       	lsr	r24
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	89 f7       	brne	.-30     	; 0xdc <main+0x4c>
  fa:	d3 cf       	rjmp	.-90     	; 0xa2 <main+0x12>
				_delay_ms(50);
			}
		}
		else
		{
			PORTB &= ~(1 << PORTB0);
  fc:	28 98       	cbi	0x05, 0	; 5
  fe:	d1 cf       	rjmp	.-94     	; 0xa2 <main+0x12>

00000100 <__vector_2>:
	}
	return 0;
}

ISR(INT1_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	if(!state)
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	89 2b       	or	r24, r25
 118:	39 f4       	brne	.+14     	; 0x128 <__vector_2+0x28>
	{
		state = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 126:	04 c0       	rjmp	.+8      	; 0x130 <__vector_2+0x30>
	}
	else
	{
		state = 0;
 128:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	9e e4       	ldi	r25, 0x4E	; 78
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <__vector_2+0x34>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_2+0x3a>
 13a:	00 00       	nop
	}
	_delay_ms(5);
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
